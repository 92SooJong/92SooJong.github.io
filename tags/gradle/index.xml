<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gradle on Today I Learn</title>
    <link>https://92SooJong.github.io/tags/gradle/</link>
    <description>Recent content in Gradle on Today I Learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Jan 2023 16:00:00 +0900</lastBuildDate><atom:link href="https://92SooJong.github.io/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gradle : Terminology</title>
      <link>https://92SooJong.github.io/posts/build/gradle-docs/terminology/</link>
      <pubDate>Sat, 21 Jan 2023 16:00:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/build/gradle-docs/terminology/</guid>
      <description>원문 링크 https://docs.gradle.org/current/userguide/what_is_gradle.html#terminology
Terminology Projects Projects는 빌드 대상이다. Projects는 build script를 포함하는데 위치는 root에 build.gradle라는 이름으로 있다. Build script는 Projects에 대한 tasks, dependencies, plugins와 그외 설정들을 포함하고 있다. build는 1개 이상의 Project를 포함할 수 있으며, 각 Project는 자신들의 subproject를 가질 수 있다.
Tasks Tasks는 소프트웨어 배포, 테스트 실행, 코드 컴파일작업 실행에 대한 로직들을 포함한다. 대부분의 경우는 기존에 존재하는 task를 사용하게 된다. Gradle은 일반적인 build 시스템이 필요로 하는 task를 기본적으로 제공한다.(예를들면, Java Test task같은 경우 기본적으로 Built-in 되어 있어서 사용자가 직접 추가하지 않아도 된다!</description>
    </item>
    
    <item>
      <title>Gradle : Toolchains for JVM projects</title>
      <link>https://92SooJong.github.io/posts/build/gradle-docs/toolchains-for-jvm-projects/</link>
      <pubDate>Sat, 21 Jan 2023 16:00:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/build/gradle-docs/toolchains-for-jvm-projects/</guid>
      <description>default 설정에 따라 gradle은 프로젝트의 빌드, gradle 자체를 실행하는데 있어서 똑같은 자바 버전을 사용한다. (참고. gradle은 Java로 구현되어 있음.) By default, Gradle uses the same Java version for running Gradle itself and building JVM projects.
이것이 항상 좋은것만은 아니다. 개발자 별로 또는 CI 서버가 서로 다른 자바 버전을 사용해서 프로젝트를 빌드한다면 예상치 못한 문제가 발생할 수 있다. (사용자 마다 running gradle 버전이 다르면 프로젝트 빌드시 사용하는 JDK의 버전도 달라질것이다.) 거기다 running gradle이 지원하지 않는 버전의 자바를 사용해서 프로젝트를 빌드하고 싶은 경우도 있을것이다.</description>
    </item>
    
    <item>
      <title>Gradle : Building Java Applications Sample</title>
      <link>https://92SooJong.github.io/posts/build/gradle-docs/building-java-applications-sample/</link>
      <pubDate>Fri, 20 Jan 2023 22:55:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/build/gradle-docs/building-java-applications-sample/</guid>
      <description>원문 링크 https://docs.gradle.org/current/samples/sample_building_java_applications.html
프로젝트 구조 wrapper 파일을 포함한 폴더 wrapper를 실행하기 위한 스크립트들 build 이름과 서브모듈을 정의하기 위한 세팅파일 app 프로젝트(예시)를 빌드하기 위한 스크립트 자바 서비스 코드 폴더 자바 테스트 코드 폴더 Review the project files 최초의 settings.gradle 파일엔 2줄이 있다. rootProject.name build에 이름을 부여한다. 이 정보가 없으면 기본적으로 폴더이름을 따라가게 된다. (가능하면 위 처럼 fix된 이름으로 하자)
include(&amp;quot;app&amp;quot;) 프로젝트가 포함하고 있는 서브프로젝트를 정의한다. 서브프로젝트를 추가하고 싶다면 include(..)를 사용하면된다.
우리는 app이라 불리는 1개의 서브 프로젝트를 가지고 있으며, app의 빌드 설정은 app/build.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HashMap on Today I Learn</title>
    <link>https://92SooJong.github.io/tags/hashmap/</link>
    <description>Recent content in HashMap on Today I Learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Nov 2022 18:00:00 +0900</lastBuildDate><atom:link href="https://92SooJong.github.io/tags/hashmap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Load Factor in HashMap</title>
      <link>https://92SooJong.github.io/posts/computer-science/load-factor-in-hashmap/</link>
      <pubDate>Fri, 25 Nov 2022 18:00:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/computer-science/load-factor-in-hashmap/</guid>
      <description>Map Simple view of Java’s data strcutrue class hierachy
Terminology Node: Key-Value 형태의 데이터와 연결되어 있는 다음 노드를 가르키는 데이터 구조를 의미한다
Bucket: Linked List로 이뤄진 Node의 집합
Capacity : Bucket의 수를 의미한다.
Initial Capacity Capacity는 Bucket의 수를 의미한다.
초기 Bucket의 수는 15개이다. (2^4)
좋은 HashMap 알고리즘은 element가 균일하게 HashMap에 분배되어 있도록 한다.
16개의 element가 있을때 각 bucket은 1개의 노드만 가지는 Linked List로 구성된다. 따라서 노드를 검색할때 bucket내에서 1회만에 element를 찾을 수 있다.</description>
    </item>
    
    <item>
      <title>Hashing in Data Structure</title>
      <link>https://92SooJong.github.io/posts/computer-science/hashing-in-data-structure/</link>
      <pubDate>Fri, 18 Nov 2022 22:00:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/computer-science/hashing-in-data-structure/</guid>
      <description>https://www.scaler.com/topics/data-structures/hashing-in-data-structure/
Time complexity - O(log n)
Space complexity - O(n)
Key - Value Key - An Identifier to uniquely identify the data(entity)
Value - The actual Entity which we want to stroe.
This mapping helps to link easier/smaller key to a particular value
Hashing performs a transformation on this key, to return an Integer value which can be used as the memory address to place this Key-Value at.
On non-integeral keys, there are 2 steps involved.</description>
    </item>
    
  </channel>
</rss>

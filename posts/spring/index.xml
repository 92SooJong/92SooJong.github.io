<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on Today I Learn</title>
    <link>https://92SooJong.github.io/posts/spring/</link>
    <description>Recent content in Spring on Today I Learn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jan 2023 14:04:00 +0900</lastBuildDate><atom:link href="https://92SooJong.github.io/posts/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring : ResponseBody Annotation</title>
      <link>https://92SooJong.github.io/posts/spring/responsebody-annotation/</link>
      <pubDate>Sun, 29 Jan 2023 14:04:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/spring/responsebody-annotation/</guid>
      <description>설명 The @ResponseBody annotation in Spring is used to indicate that the return value of a method should be bound to the web response body. This annotation tells Spring to use a message converter to convert the return value to a format that can be sent back to the client, typically in the body of the HTTP response.
When a controller method is annotated with @ResponseBody, Spring will automatically convert the returned object to an HTTP response body, by using an instance of HttpMessageConverter.</description>
    </item>
    
    <item>
      <title>Spring : SpringApplicationRunListener를 까보자</title>
      <link>https://92SooJong.github.io/posts/spring/springapplicationrunlistener/</link>
      <pubDate>Wed, 04 Jan 2023 22:55:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/spring/springapplicationrunlistener/</guid>
      <description>SpringApplicationRunListener 인터페이스 SpringApplication run 메소드의 Listener이다. SpringApplicationRunListener는 SpringFactoriesLoader에 의해 로드된다. 그리고 SpringApplication 인스턴스와 아규먼트를 받아내기 위해서 반드시 public 생성자를 선언해야한다. 매 run 메소드마다 새로운 SpringApplicationRunListener가 생성될것이다. EventPublishingRunListener SpringApplicationRunListener 인터페이스를 구현한다 SpringApplicationEvent를 Publish하는 역할을 함. 이벤트는 ApplicationEventMulticaster 필드가 관리된다. context가 refresh 되기전에 ApplicationEventMulticaster는 이벤트를 실행한다 ApplicationEventMulticaster 인터페이스 Spring framework 영역이다.(boot 아님!) 여러개의 ApplicationListener타입 Object를 관리하며 이벤트를 ApplicationListener에 부여하는 역할을 한다 이벤트 publish를 위해선 ApplicationEventMulticaster대신 해서 ApplicationEventPublisher 또는 ApplicationContext를 사용할 수도 있음 ApplicationEvent 추상 클래스 모든 Application의 event는 ApplicationEvent를 확장해야한다 ApplicationContextEvent 추상 클래스 ApplicationContext가 사용할 이벤트를 의미한다.</description>
    </item>
    
    <item>
      <title>Spring : DefaultBootstrapContext을 까보자</title>
      <link>https://92SooJong.github.io/posts/spring/defaultbootstrapcontext/</link>
      <pubDate>Tue, 03 Jan 2023 23:55:00 +0900</pubDate>
      
      <guid>https://92SooJong.github.io/posts/spring/defaultbootstrapcontext/</guid>
      <description>DefaultBootstrapContext ConfigurableBootstrapContext를 구현한 디폴트 클래스다. ConfigurableBootstrapContext BootstrapContext와 BootstrapRegistry를 extends한다 BootstrapContext는 BootstrapRegistry를 통해서 configuration 메소드를 제공한다 BootstrapRegistry 단순한 형태의 오브젝트 레지스트리(저장소)이다. startup이 진행되는 동안 사용가능하다. ApplicationContext가 준비되기 직전인 Environment 후처리까지 사용할 수 있다. 레지스트리는 Class를 Key로 사용한다. 이뜻은 하나의 인스턴스만 저장될 수 있음을 의미한다. BootstrapRegistry는 인스턴스를 등록하는데 사용된다.(인스턴스를 생성하는 cost는 비싸다.) 또한 BootstrapRegistry는 ApplicationContext가 사용되기 전에 필요에 따라 공유되기도 한다 addCloseListener(ApplicationListener) 메소드는 listener를 추가하는데 사용된다. listener는 BootstrapContext가 종료되거나 ApplicationContext가 완전히 준비된 시점에 실행된다.</description>
    </item>
    
  </channel>
</rss>
